MATLAB Implementation :
%% Step 1: Load and Display the Image
I = imread('/MATLAB Drive/iron stone microscope sample.png');  % Replace with your file path
figure, imshow(I);
title('Original Image');

%% Step 2: Convert to Grayscale and Enhance Contrast
I_gray = im2gray(I);  % Convert to grayscale
figure, imshow(I_gray);
title('Grayscale Image');


I3 = imadjust(I_gray);  % Enhance contrast using histogram stretching
figure, imshow(I3);
title('Contrast-Enhanced Image');

%% Step 3: Convert to Binary Image
bw = imbinarize(I3, 0.5);  % Threshold at 0.5 (adjust as needed)
figure, imshow(bw);
title('Binary Image');

%% Step 4: Noise Reduction
bw = bwareaopen(bw, 525);  % Remove objects smaller than 525 pixels
figure, imshow(bw);
title('Noise-Reduced Binary Image');

%% Step 5: Morphological Processing to Separate Ooids
num_of_pixels = 2;  % Structuring element radius
SE = strel('disk', num_of_pixels);
bw = imerode(bw, SE);  % Erode to separate connected ooids
figure, imshow(bw);
title('Eroded Binary Image (Separated Ooids)');

%% Step 6: Identify Objects in the Image
cc = bwconncomp(bw, 4);  % 4-connectivity for object identification
numberOfObjects = cc.NumObjects;  % Count number of ooids
disp(['Number of Ooids: ', num2str(numberOfObjects)]);
Number of Ooids: 620

%% Step 7: Visualize the Labeled Ooids
labeled = labelmatrix(cc);
RGB_label = label2rgb(labeled, 'spring', 'c', 'shuffle');
figure, imshow(RGB_label);
title('Labeled Ooids in Ironstone');

%% Step 8: Compute Ooid Areas
graindata = regionprops(cc, 'Area', 'Centroid', 'BoundingBox', 'Eccentricity', 'Extent', 'Solidity', 'Perimeter');
grain_areas = [graindata.Area];  % Vector of ooid areas
%% Step 8: Compute Ooid Areas
graindata = regionprops(cc, 'Area', 'Centroid', 'BoundingBox', 'Eccentricity', 'Extent', 'Solidity', 'Perimeter');
grain_areas = [graindata.Area];  % Vector of ooid areas
%% Step 9: Find the Largest Ooid and Visualize It
[maxarea, idx] = max(grain_areas);
disp(['Largest Ooid Area: ', num2str(maxarea), ' pixels']);
disp(['Largest Ooid Index: ', num2str(idx)]);
Largest Ooid Area: 27496 pixels
Largest Ooid Index: 536

grain = false(size(bw));
grain(cc.PixelIdxList{idx}) = true;
figure, imshow(grain);
title('Largest Ooid Highlighted');


%% Step 10: Compute Percentage of Image Occupied by Ooids
total_ooid_area = sum(grain_areas);
image_area = numel(bw);
percentage_occupied = (total_ooid_area / image_area) * 100;
disp(['Percentage of Image Occupied by Ooids: ', num2str(percentage_occupied), '%']);
Percentage of Image Occupied by Ooids: 33.1905%


%% Step 11: Plot Histogram of Ooid Areas
figure, histogram(grain_areas);
title('Histogram of Ooid Areas');
xlabel('Area (pixels)');
ylabel('Frequency');


%% Step 12: Function to Compute Total Area of Ooids Larger than Average
function large_area = largeOoidArea(grain_areas)
    avg_area = mean(grain_areas);  % Compute average area
    large_area = sum(grain_areas(grain_areas > avg_area));  % Sum areas larger than average
    disp(['Total Area of Large Ooids: ', num2str(large_area), ' pixels']);
end
% Call the function to compute large ooid area
large_area = largeOoidArea(grain_areas);
Total Area of Large Ooids: 465567 pixels




